
//4차시

@Autowired private somthing s; -> 필드 주입, 매우 비추 하는 방법 컨트롤하기가 어렵다고 함

@AutoWired
public 생성자 -> 의존성 주입

setter를 통한 의존성 주입, -> encapsulation 위반 때문에 안쓴다.

실무에서 상황에 따라 구현 클래스를 변경해야 하면 설정을 통해 스프링 빈을 등록한다. -> 요게 좀 중요하다고 함
-> 그냥 interface를 통한 wrapping의 개념

//5차시
참고사항
 컨트롤러가 정적 파일보다 우선순위가 높다. ?// viewresolver가 찾는 우선순위를 말하는 거였음


왜 memberForm은 controller가 아닌데 controller 패키지에 넣음?

//6차시
스프링 컨테이너가 디펜덴시 인젝션 같은 것들을 통해서 객체 지향식 코딩을 할 수 있도록 많이 도와준다고 함
가련 인터페이스를 가지고 구현체 바꿔치기하는 다형성 처럼


@SpringBootTest -> 스프링 컨테이너까지 같이 테스트를 돌릴 수 있게끔 하는 어노테이션
@Transactional -> 데이터베이스 연동하면서 테스트할때 자동 롤백 해주는 어노테이션

테스트케이스는 사실 컨테이너까지 하는 통합 테스트 보다 자바만 테스트하듯 단위 테스트 지향적으로 하는 것을 추천함